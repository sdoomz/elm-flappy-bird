var _sdoomz$elm_flappy_bird$Update$showScoreBoard = function (model) {
	if (!_elm_lang$core$Native_Utils.eq(model.state, _sdoomz$elm_flappy_bird$Model$GameOver)) {
		return model;
	} else {
		var scoreBoard$ = model.scoreBoard;
		var opacity = (_elm_lang$core$Native_Utils.cmp(scoreBoard$.opacity, 1) < 0) ? (scoreBoard$.opacity + 0.1) : 1;
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				scoreBoard: _elm_lang$core$Native_Utils.update(
					scoreBoard$,
					{opacity: opacity})
			});
	}
};
var _sdoomz$elm_flappy_bird$Update$hasCollision = F2(
	function (pipe, _p0) {
		var _p1 = _p0;
		var _p3 = _p1.y;
		var _p2 = _p1.x;
		return ((_elm_lang$core$Native_Utils.cmp(_p2 - 29, pipe.x + (pipe.w / 2)) < 0) && ((_elm_lang$core$Native_Utils.cmp(_p2 + 29, pipe.x - (pipe.w / 2)) > 0) && ((_elm_lang$core$Native_Utils.cmp(_p3 - 20, pipe.y + (pipe.h / 2)) < 0) && (_elm_lang$core$Native_Utils.cmp(_p3 + 20, pipe.y - (pipe.h / 2)) > 0)))) ? true : false;
	});
var _sdoomz$elm_flappy_bird$Update$incrementScore = F2(
	function (scoreBoard, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				scoreBoard: _elm_lang$core$Native_Utils.update(
					scoreBoard,
					{score: scoreBoard.score + 1})
			});
	});
var _sdoomz$elm_flappy_bird$Update$hasPastPipes = function (pipe) {
	var _p4 = pipe;
	if (_p4.ctor === 'Just') {
		var first = _elm_lang$core$Basics$fst(_p4._0);
		return _elm_lang$core$Native_Utils.cmp(first.x + (first.w / 2), -50) < 0;
	} else {
		return true;
	}
};
var _sdoomz$elm_flappy_bird$Update$spawnObstacles = function (model) {
	if (_elm_lang$core$Native_Utils.eq(model.state, _sdoomz$elm_flappy_bird$Model$Play) && _sdoomz$elm_flappy_bird$Update$hasPastPipes(
		_elm_lang$core$List$head(
			_elm_lang$core$List$reverse(model.pipes)))) {
		var seed = _elm_lang$core$Random$initialSeed(
			_elm_lang$core$Basics$round(model.clock));
		var random = _elm_lang$core$Basics$fst(
			A2(
				_elm_lang$core$Random$step,
				A2(_elm_lang$core$Random$float, -100, 100),
				seed));
		var height1 = (200 - random) + 100;
		var y1 = ((_elm_lang$core$Basics$toFloat(model.h) - height1) / 2) + 100;
		var top = A5(_sdoomz$elm_flappy_bird$Model$Pipe, 285, y1, 180, 90, height1);
		var height2 = 200 + random;
		var y2 = (_elm_lang$core$Basics$toFloat(0 - model.h) + height2) / 2;
		var bottom = A5(_sdoomz$elm_flappy_bird$Model$Pipe, 285, y2, 0, 90, height2);
		var pipes = A2(
			_elm_lang$core$List$append,
			model.pipes,
			_elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: top, _1: bottom}
				]));
		return _elm_lang$core$Native_Utils.update(
			model,
			{pipes: pipes});
	} else {
		return model;
	}
};
var _sdoomz$elm_flappy_bird$Update$calculateFinalScore = function (model) {
	return _sdoomz$elm_flappy_bird$Update$hasPastPipes(
		_elm_lang$core$List$head(model.pipes)) ? A2(_sdoomz$elm_flappy_bird$Update$incrementScore, model.scoreBoard, model) : model;
};
var _sdoomz$elm_flappy_bird$Update$checkCollisions = function (model) {
	if ((!_elm_lang$core$Native_Utils.eq(model.state, _sdoomz$elm_flappy_bird$Model$GameOver)) && ((_elm_lang$core$Native_Utils.cmp(model.y, -275) < 1) || A2(
		_elm_lang$core$List$any,
		function (p) {
			return A2(_sdoomz$elm_flappy_bird$Update$hasCollision, p, model);
		},
		_elm_lang$core$List$concat(
			A2(
				_elm_lang$core$List$map,
				function (_p5) {
					var _p6 = _p5;
					return _elm_lang$core$Native_List.fromArray(
						[_p6._0, _p6._1]);
				},
				model.pipes))))) {
		var model$ = _sdoomz$elm_flappy_bird$Update$calculateFinalScore(model);
		return _elm_lang$core$Native_Utils.update(
			model$,
			{state: _sdoomz$elm_flappy_bird$Model$GameOver});
	} else {
		return model;
	}
};
var _sdoomz$elm_flappy_bird$Update$hasRedundantPipes = function (model) {
	var pipes = _elm_lang$core$List$head(model.pipes);
	var _p7 = pipes;
	if (_p7.ctor === 'Just') {
		var first = _elm_lang$core$Basics$fst(_p7._0);
		return _elm_lang$core$Native_Utils.cmp(
			first.x + (first.w / 2),
			_elm_lang$core$Basics$toFloat(model.w) / -2) < 0;
	} else {
		return false;
	}
};
var _sdoomz$elm_flappy_bird$Update$removeObstacles = function (model) {
	return (_elm_lang$core$Native_Utils.eq(model.state, _sdoomz$elm_flappy_bird$Model$Play) && _sdoomz$elm_flappy_bird$Update$hasRedundantPipes(model)) ? A2(
		_sdoomz$elm_flappy_bird$Update$incrementScore,
		model.scoreBoard,
		_elm_lang$core$Native_Utils.update(
			model,
			{
				pipes: A2(_elm_lang$core$List$drop, 1, model.pipes)
			})) : model;
};
var _sdoomz$elm_flappy_bird$Update$animateHorizontal = function (model) {
	if (!_elm_lang$core$Native_Utils.eq(model.state, _sdoomz$elm_flappy_bird$Model$GameOver)) {
		var pipes = A2(
			_elm_lang$core$List$map,
			function (_p8) {
				var _p9 = _p8;
				var _p10 = _p9._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p10,
						{x: _p10.x - 3}),
					_1: _elm_lang$core$Native_Utils.update(
						_p9._1,
						{x: _p10.x - 3})
				};
			},
			model.pipes);
		var gx$ = (_elm_lang$core$Native_Utils.cmp(model.gx, -36) > 0) ? (model.gx - 3) : 0;
		return _elm_lang$core$Native_Utils.update(
			model,
			{gx: gx$, pipes: pipes});
	} else {
		return model;
	}
};
var _sdoomz$elm_flappy_bird$Update$animateVertical = F2(
	function (dt, model) {
		var vy$ = (_elm_lang$core$Native_Utils.cmp(model.vy, 10) < 0) ? (model.vy + 0.5) : model.vy;
		var direction$ = (_elm_lang$core$Native_Utils.eq(model.direction, _sdoomz$elm_flappy_bird$Model$Top) && (_elm_lang$core$Native_Utils.cmp(model.y, 10) > -1)) ? _sdoomz$elm_flappy_bird$Model$Bottom : ((_elm_lang$core$Native_Utils.eq(model.direction, _sdoomz$elm_flappy_bird$Model$Bottom) && (_elm_lang$core$Native_Utils.cmp(model.y, -10) < 1)) ? _sdoomz$elm_flappy_bird$Model$Top : model.direction);
		var yMax = (_elm_lang$core$Basics$toFloat(model.h) / 2) + 100;
		var y$ = ((_elm_lang$core$Native_Utils.cmp(model.y, 10) < 1) && _elm_lang$core$Native_Utils.eq(model.direction, _sdoomz$elm_flappy_bird$Model$Top)) ? (model.y + 1) : (((_elm_lang$core$Native_Utils.cmp(model.y, -10) > -1) && _elm_lang$core$Native_Utils.eq(model.direction, _sdoomz$elm_flappy_bird$Model$Bottom)) ? (model.y - 1) : ((_elm_lang$core$Native_Utils.cmp(model.y, yMax) > 0) ? yMax : ((_elm_lang$core$Native_Utils.cmp(model.y, -275) > 0) ? (model.y - vy$) : model.y)));
		var clock = model.clock + dt;
		return _elm_lang$core$Native_Utils.update(
			model,
			{clock: clock, y: y$, vy: vy$, direction: direction$});
	});
var _sdoomz$elm_flappy_bird$Update$update = F2(
	function (action, model) {
		var _p11 = action;
		switch (_p11.ctor) {
			case 'Tick':
				return _sdoomz$elm_flappy_bird$Update$showScoreBoard(
					_sdoomz$elm_flappy_bird$Update$checkCollisions(
						_sdoomz$elm_flappy_bird$Update$animateHorizontal(
							A2(
								_sdoomz$elm_flappy_bird$Update$animateVertical,
								_p11._0,
								_sdoomz$elm_flappy_bird$Update$spawnObstacles(
									_sdoomz$elm_flappy_bird$Update$removeObstacles(model))))));
			case 'Jump':
				return _elm_lang$core$Native_Utils.eq(model.state, _sdoomz$elm_flappy_bird$Model$Ready) ? _elm_lang$core$Native_Utils.update(
					model,
					{state: _sdoomz$elm_flappy_bird$Model$Play, direction: _sdoomz$elm_flappy_bird$Model$None, vy: -8}) : (_elm_lang$core$Native_Utils.eq(model.state, _sdoomz$elm_flappy_bird$Model$Play) ? _elm_lang$core$Native_Utils.update(
					model,
					{vy: -8}) : model);
			case 'Restart':
				return _sdoomz$elm_flappy_bird$Model$initial;
			default:
				return model;
		}
	});
